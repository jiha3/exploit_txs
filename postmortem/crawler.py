import os 

from datetime import datetime
import json
import os
import requests
import pandas as pd
import argparse
from bs4 import BeautifulSoup as bs


'''
pol : polygon
opt : optimism 
arb : arbitrum
fan : fantom
avl : avalanche
'''

chains = ['bsc', 'eth', 'pol', 'opt', 'arb', 'fan', 'avl']

BSC_API_KEY='JWXPY5914QXS45BJXVNTHAJHZIJR8UXPFE'
ETH_API_KEY='RJKYWWA8TJW1HEHDUYXRH6S3YF213F8HVR'
#bsc_url = 'https://bsc-dataseed.binance.org'
bsc_url = 'https://api.bscscan.com/api'
eth_url = 'https://api.etherscan.io/api'

bsc_params = {
  'module' : 'logs', 
  'action' : 'getLogs',
  'address' : '0x2b528a28451e9853F51616f3B0f6D82Af8bEA6Ae',
  'apiKey' : BSC_API_KEY
}

eth_params = {
  'module' : 'logs', 
  'action' : 'getLogs',
  'address' : '0xdAC17F958D2ee523a2206206994597C13D831ec7',
  'apiKey' : ETH_API_KEY
}

headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, '
                               'like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
'''
r = requests.get(eth_url, params=params)
json_data = json.loads(r.text)["result"]
df = pd.json_normallize(json_data)

'''
tx_dict = dict()
ex_txs = list()
# crawl txs on a contract address page
def get_page_data(url, key):
    #r = requests.get(url, params= eth_params, headers=headers)
    r = requests.get(url,params={'apiKey':key}, headers=headers)
    if r.status_code != 200:
        print(r.status_code)
        os.exit(1)
    #print(r.content)
    soup = bs(r.content, 'html.parser')
    row_dict = {}
    #table = soup.find_all('div', class_="tab-content")
    table = soup.find('tbody', class_='align-middle text-nowrap')
    #print(table)
    trs = table.find_all('tr')
    for tr in trs:
        tds = tr.find_all('td')
        tx = tds[1].find('a', class_="hash-tag text-truncate myFnExpandBox_searchVal")['href'].split('/')[-1]
        method = tds[2].find('span')['title']
        print(tx, " ################ " , method)
        tx_dict[tx] = dict()
        tx_dict[tx]['method']=method
    
       
def get_exploit_tx(method):
    for k, v in tx_dict.items():
        if(v['method']==method):
            ex_txs.append(k)
    ex_txs.reverse()
    for tx in ex_txs:
        print(tx+",")
    

if __name__=="__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--chain', '-c', type=str, help='blockchain', default='eth')
    parser.add_argument('--url', '-u', type=str, help='contract url address')
    #parser.add_argument('--help', '-h', )
    parser.add_argument('--method', '-m', type=str, help='malicious function method (4bytes)')
    args = parser.parse_args()
    if args.chain not in chains:
        print("Not available chain")
        os.exit(1)  
    api_key = args.chain.upper()+"_API_KEY"

    get_page_data(args.url, api_key)
    #get_page_data('https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7')
    get_exploit_tx(args.method)