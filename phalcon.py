import requests
from bs4 import BeautifulSoup
import json
import time
import os
import pandas as pd
import re
from config import DB, HEADER, TXS, PHALCON_CACHE

PHALCON_URL = "https://phalcon.blocksec.com/explorer/tx"
PHALCON_CACHE_DIR = "cache/phalcon"
chain_set = ("eth", "bsc", "optimism", "opt", "avalanche", "avl", "avax", "polygon", "pol", "arbitrum", "gnosis", "fantom", "ftm")

balance_change = dict()
main_accounts = dict()
txs = list()
targets = list()
def get_balance_change_from_tx(tx_url):
    #print(tx_url)
    #if want to handle it as a list
    '''
    for tx_url in tx_list:
        chain = tx_url.split('/')[-2]
        tx_hash = tx_url.split('/')[-1]
        tx = Transaction(chain, tx_hash)
    '''
    # and tab below part
    chain = tx_url.split('/')[-2]
    tx_hash = tx_url.split('/')[-1]
    r = requests.get(f"{PHALCON_URL}/{chain}/{tx_hash}", headers = HEADER)
    #r = requests.get(f"{url}", headers = headers)
    soup = BeautifulSoup(r.content, 'html.parser')
    next_data = str(soup.find(id="__NEXT_DATA__").string)
    next_data = json.loads(next_data)
    try:
    #if next_data['props']['pageProps']['success']:
        data = next_data['props']['pageProps']['data']
        balances = data['balanceChanges']
        accounts = data['accountLabels']
        basicInfo = data['basicInfo']
        methodId = basicInfo['callData'][:10]
        #fundFlow = data['fundFlow']
        #print(next_data)
        data_dict = dict()
        data_dict['tx_hash'] = tx_hash
        data_dict['blockNumber'] = basicInfo['blockNumber']
        data_dict['timestamp'] = basicInfo['timestamp']
        data_dict['changes'] = dict()
        data_dict['methodId'] = methodId
        changes = dict()
        token_dict = dict()
        acc_dict = dict()
        for bal in balances:
            changes[bal['account']] = dict()
            asset_dict = dict()
            #token_dict = dict()
            for asset in bal['assets']:
                for acc in accounts:
                    if (acc['address'] == asset['address'] and asset['value'] == ""):
                        token_dict[asset['address']] = {'label' : acc['label'], 'stable' : 0}
                    elif (acc['address'] == asset['address'] and asset['value'] != ""):
                        token_dict[asset['address']] = {'label' : acc['label'], 'stable' : 1} # stable coin
                    
                #asset_dict[asset['address']] = float(asset['amount'].replace(',','')) * (1.0 if asset['sign'] else -1.0)
                changes[bal['account']][asset['address']] = float(asset['amount'].replace(',','')) * (1.0 if asset['sign'] else -1.0) 
                #.append(asset_dict)
        for acc in accounts:
            acc_dict[acc['address']] = acc['label']
        data_dict['changes'] = changes
        data_dict['token'] = token_dict
        data_dict['sender'] = basicInfo['sender']
        data_dict['receiver'] = basicInfo['receiver']
        data_dict['accounts'] = acc_dict
        #print(changes)
        
        with open(f"{PHALCON_CACHE_DIR}/{chain}-{tx_hash}", "w") as f:
            json.dump(data_dict, f)
    except:
        #print(next_data['props']['pageProps']['msg'])
        print("an error occurred")
        time.sleep(5)

def load_db():
    '''
    ctx_auth = AuthenticationContext(DB)
    if ctx_auth.acquire_token_for_app(client_id = app_principal['client_id'], 
                                      client_secret = app_principal['client_secret']):
        ctx = ClientContext(DB, ctx_auth)
        web = ctx.web
        ctx.load(web)
        ctx.execute_query()
        print("Authentication successful")
    r.add_header('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, '
                               'like Gecko) Chrome/50.0.2661.102 Safari/537.36')
    content = urlopen(r)
    print(content)
    c = pd.read_csv(content)
    '''
    with open(TXS, 'r') as f:
        txs = f.read().split('\n')[1:]
        for tx in txs:
            #print(tx)  to check whitespaces
            tx_chain = tx.split('	')[0].lower()
            tx_hash = tx.split('	')[-1].lower()
            print(tx_chain, tx_hash)
            if(tx_chain not in chain_set or not (tx_hash.startswith('0x') and len(tx_hash)==66)):
                continue
            if tx_chain == "opt":
                tx_chain = "optimism"
            elif tx_chain == "avalanche" or tx_chain == "aval":
                tx_chain = "avax"
            elif tx_chain == "pol":
                tx_chain == "polygon"
            elif tx_chain == "fantom":
                tx_chain = "ftm"
            pattern = re.compile("[a-z]-")
            if not (os.path.isfile(f"{PHALCON_CACHE}/{pattern}{tx}")):
                url = f"{PHALCON_URL}/{tx_chain}/{tx_hash}"
                print(url)
                get_balance_change_from_tx(url)

if __name__ == "__main__":
    load_db()
    #get_balance_change_from_tx(['https://explorer.phalcon.xyz/tx/eth/0xe0b0c2672b760bef4e2851e91c69c8c0ad135c6987bbf1f43f5846d89e691428, https://explorer.phalcon.xyz/tx/optimism/0xae17b8a15e09e737a0ab27802a15a23ec7168f1141a5556abe5a3d9e71d7396a'])